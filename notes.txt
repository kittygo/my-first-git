print(hi {one} how are you{two}).format(one=num,two=name)

my_list = ['a','b','c']
my_list.append('d')

//tupples				we cannot change the tupple values
t=(1,2,3)

//sets
{1,2,3}


//loops
if () :
	//statements

if():
elif():
else:


x = [1,2,3,4]
[item**2 for item in x]


"""comments"""


//functions

def myfn(pa='default'):
	print(pa)

			def sqr(n):
				reutrn n**2

			list(map(sqr,seq))

			list(map(lambda var: var*2,seq))

			list(filter(lambda item: item%2 == 0,seq))
			list(filter(lambda word: word[0]=='s',seq))


def domainGet(email):
    return email.split('@')[-1]	


//numpy

np.arange(), np.linspace(), np.random.rand(), np.random.randint(), arr.reshape(), max(),.argmax(),.min(),.argmin()
shape
sum(axis=0)
std()
arr[0:5]=100
arr.copy()

np.arange(1,101).reshape(10,10) / 100

//pandas

pd.read_csv('example')
pd.read_excel('Excel_Sample.xlsx',sheetname='Sheet1')

		/data frames
		df = pd.DataFrame(arr,index='A B C D E'.split(),columns='W X Y Z'.split())
		df = pd.DataFrame(arr,index=hier_index,columns=['A','B'])

			//multi
			outside = ['G1','G1','G1','G2','G2','G2']
			inside = [1,2,3,1,2,3]
			hier_index = list(zip(outside,inside))
			hier_index = pd.MultiIndex.from_tuples(hier_index)
			//column print
			df[['W','Z']]
			//drop
			df.drop('new',axis=1,inplace=True)
			//rows print
			df.loc['A']
			df.iloc[2]
			df.loc[['A','B'],['W','Y']]
			//misc
			df[df['W']>0]
			//index edit
			df.reset_index() 
			df['States'] = newind
			df.set_index('States',inplace=True)
			//print misc
			df.loc['G1'].loc[1]


			//groupby
			df.groupby('Company')<.mean(),.std(),.min(),.max(),.count(),.describe(),.transpose()>

			//concat
			pd.concat([df1,df2,df3])
			pd.concat([df1,df2,df3],axis=1)

			//merge
			pd.merge(left, right, how='outer', on=['key1', 'key2'])
			pd.merge(left, right, how='right', on=['key1', 'key2'])
			pd.merge(left, right, how='left', on=['key1', 'key2'])

			//join
			left.join(right)
			left.join(right, how='outer')

			//not accessble or missing data
			df.dropna(axis=1)
			df.fillna(value='FILL VALUE')
			df['A'].fillna(value=df['A'].mean())
			df.isnull()

			//misc
			df['col2'].unique()
			df['col2'].nunique()
			df['col2'].value_counts()
			newdf = df[(df['col1']>2) & (df['col2']==444)]

//linear regressions
from sklearn.model_selection import train_test_split 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101)
from sklearn.linear_model import LinearRegression
lm = LinearRegression()
lm.fit(X_train,y_train)
LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)
predictions = lm.predict(X_test)
plt.scatter(y_test,predictions)
from sklearn import metrics
print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))

//logistic regressions

def impute_age(cols):
    Age = cols[0]
    Pclass = cols[1]
    
    if pd.isnull(Age):

        if Pclass == 1:
            return 37

        elif Pclass == 2:
            return 29

        else:
            return 24

    else:
        return Age

train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)
sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')
train.drop('Cabin',axis=1,inplace=True)
train.head()
train.dropna(inplace=True)
sex = pd.get_dummies(train['Sex'],drop_first=True)
embark = pd.get_dummies(train['Embarked'],drop_first=True)
train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)
train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(train.drop('Survived',axis=1), 
                                                    train['Survived'], test_size=0.30, 
                                                    random_state=101)

from sklearn.linear_model import LogisticRegression
logmodel = LogisticRegression()
logmodel.fit(X_train,y_train)
predictions = logmodel.predict(X_test)
from sklearn.metrics import classification_report
print(classification_report(y_test,predictions))
